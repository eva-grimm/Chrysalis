@using Microsoft.AspNetCore.Identity;
@model Project
@inject UserManager<BTUser> _UserManager
@inject IProjectService _ProjectService
@inject IFileService _FileService
@inject IRoleService _RoleService
@inject ITicketHistoryService _HistoryService

@{
    ViewData["Title"] = $"{Model.Name} Details";
    BTUser? projectManager = await _ProjectService.GetProjectManagerAsync(Model.Id);
    BTUser? currentUser = await _UserManager.GetUserAsync(User);
    bool userIsAdmin = await _RoleService.IsUserInRoleAsync(currentUser, nameof(BTRoles.Admin));
    bool userOnProject = Model.Members.Any(u => u.Id == currentUser?.Id);
    int historyIndex = 0;
}

<div class="row ps-3">
    <div class="col-12 col-md-4">
        <h3>Details</h3>
        <partial name="_ProjectDescriptionPartial" model="Model" />
        <partial name="_ProjectDetailsPartial" model="Model" />
        <div class="d-flex justify-content-between align-items-center">
            <h3 class="mt-3">Members</h3>
            <span>
                @if (userIsAdmin)
                {
                    <a asp-action="AssignPM" asp-controller="Projects"
                       asp-route-projectId="@Model.Id" class="btn btn-secondary btn-sm">
                        Assign PM
                    </a>
                    <a asp-action="AssignMembers" asp-controller="Projects"
                       asp-route-projectId="@Model.Id" class="btn btn-primary btn-sm">
                        Assign Members
                    </a>
                }
            </span>
        </div>
        @foreach (BTUser? user in Model.Members)
        {
            <partial name="_UserPartial" model="user" />
        }
    </div>
    <div class="col-12 col-md-8">
        <div class="d-flex justify-content-between align-items-center">
            <h3>Tickets</h3>
            @if (userIsAdmin || userOnProject)
            {
                <a asp-action="Create" asp-controller="Tickets"
                   asp-route-projectId="@Model.Id" class="btn btn-primary btn-sm">
                    New Ticket
                </a>
            }
        </div>
        <partial name="_ProjectTicketsTablePartial" model="Model.Tickets" />
        <h3 class="mt-3">Ticket History</h3>
        <div class="card custom-card">
            <div class="card-body">
                <div class="vtimeline">
                    @foreach (TicketHistory? history in await _HistoryService.GetProjectTicketHistoriesAsync(Model.Id, Model.CompanyId))
                    {
                        if (historyIndex % 2 == 0)
                        {
                            <div class="timeline-wrapper timeline-wrapper-primary">
                                <div class="timeline-badge"></div>
                                <div class="timeline-panel">
                                    <div class="timeline-heading">
                                        <div class="timeline-title fw-bold">User: @history.User?.FullName</div>
                                        <div class="timeline-body"><p>@history.Description</p></div>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="timeline-wrapper timeline-inverted timeline-wrapper-secondary">
                                <div class="timeline-badge"></div>
                                <div class="timeline-panel">
                                    <div class="timeline-heading">
                                        <div class="timeline-title fw-bold">User: @history.User?.FullName</div>
                                        <div class="timeline-body"><p>@history.Description</p></div>
                                    </div>
                                </div>
                            </div>
                        }
                        historyIndex++;
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <!--Sweet Alerts-->
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let message = '@(ViewBag.SwalMessage)';
        if (!message.includes("Error") && message != '') {
            Swal.fire({
                backdrop: false,
                icon: 'success',
                title: message,
                showConfirmButton: true
            });
        } else if (message.includes("Error")) {
            Swal.fire({
                backdrop: false,
                icon: 'error',
                title: 'Oops...',
                text: message
            });
        }
    </script>
    <!--End Sweet Alerts-->
    }