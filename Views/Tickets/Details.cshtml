@using Microsoft.AspNetCore.Identity
@model Ticket
@inject IFileService _FileService
@inject UserManager<BTUser> _UserManager
@inject IRoleService _RoleService
@inject ICompanyService _CompanyService
@inject ITicketHistoryService _HistoryService
@inject ICompanyService _CompanyService
@inject IProjectService _ProjectService
@{
    ViewData["Title"] = "Ticket Details";
    BTUser? currentUser = await _UserManager.GetUserAsync(User);
}

<div class="row">
    @* Start Priority Card*@
    <div class="col-12 col-md-6 col-xl-3">
        <div class="card custom-card hover-card">
            <div class="card-body">
                <div class="d-flex justify-content-between fs-5 pb-3">
                    <i class="bi bi-flag text-primary"></i>
                    @if (User.IsInRole(nameof(BTRoles.Admin))
                    || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true
                    || currentUser?.Id.Equals(Model.DeveloperUserId) == true
                    || currentUser?.Id.Equals(Model.SubmitterUserId) == true)
                    {
                        <a data-bs-target="#priorityModal"
                           data-bs-toggle="modal">
                            <i class="bi bi-pencil-fill text-danger"></i>
                        </a>
                    }
                </div>
                <h5>@Model.TicketPriority?.Name</h5>
                <h6 class="text-primary">Ticket Priority</h6>
            </div>
        </div>
    </div>
    @* End Priority Card*@
    @* Start Status Card*@
    <div class="col-12 col-md-6 col-xl-3">
        <div class="card custom-card hover-card">
            <div class="card-body">
                <div class="d-flex justify-content-between fs-5 pb-3">
                    @if (Model.Archived || Model.ArchivedByProject)
                    {
                        <i class="bi bi-clock-history text-secondary"></i>
                    }
                    else
                    {
                        <i class="bi bi-activity text-secondary"></i>
                    }
                    @if (User.IsInRole(nameof(BTRoles.Admin))
                    || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true
                    || currentUser?.Id.Equals(Model.DeveloperUserId) == true
                    || currentUser?.Id.Equals(Model.SubmitterUserId) == true)
                    {
                        <a data-bs-target="#statusModal"
                           data-bs-toggle="modal">
                            <i class="bi bi-pencil-fill text-danger"></i>
                        </a>
                    }
                </div>
                <h5>
                    @if (Model.Archived)
                    {
                        <span>Archived</span>
                    }
                    else if (Model.ArchivedByProject)
                    {
                        <span>Project Archived</span>
                    }
                    else
                    {
                        @Model.TicketStatus?.Name
                    }
                </h5>
                <h6 class="text-primary">Ticket Status</h6>
            </div>
        </div>
    </div>
    @* End Status Card*@
    @* Start Type Card*@
    <div class="col-12 col-md-6 col-xl-3">
        <div class="card custom-card hover-card">
            <div class="card-body">
                <div class="d-flex justify-content-between fs-5 pb-3">
                    <i class="bi bi-clipboard-data text-info"></i>
                    @if (User.IsInRole(nameof(BTRoles.Admin))
                    || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true
                    || currentUser?.Id.Equals(Model.DeveloperUserId) == true
                    || currentUser?.Id.Equals(Model.SubmitterUserId) == true)
                    {
                        <a data-bs-target="#typeModal"
                           data-bs-toggle="modal">
                            <i class="bi bi-pencil-fill text-danger"></i>
                        </a>
                    }
                </div>
                <h5>@Model.TicketType?.Name</h5>
                <h6 class="text-primary">Ticket Type</h6>
            </div>
        </div>
    </div>
    @* End Type Card*@
    @* Start Developer Card*@
    <div class="col-12 col-md-6 col-xl-3">
        <div class="card custom-card hover-card">
            <div class="card-body">
                <div class="d-flex justify-content-between fs-5 pb-3">
                    <i class="bi bi-braces text-success"></i>
                    @if (User.IsInRole(nameof(BTRoles.Admin))
                    || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true)
                    {
                        <a data-bs-target="#devModal"
                           data-bs-toggle="modal">
                            <i class="bi bi-pencil-fill text-danger"></i>
                        </a>
                    }
                </div>
                <h5>
                    @if (Model.DeveloperUserId == null)
                    {
                        <span>Unassigned</span>
                    }
                    else
                    {
                        @((await _CompanyService.GetCompanyUserByIdAsync(Model.DeveloperUserId, Model.Project?.CompanyId))?.FullName)
                    }
                </h5>
                <h6 class="text-primary">Assigned Developer</h6>
            </div>
        </div>
    </div>
    @* End Developer Card*@
    @* Start Description Card*@
    <div class="col-12 col-md-8">
        <div class="d-flex justify-content-between fs-5">
            <h3>Ticket Description</h3>
            @if (User.IsInRole(nameof(BTRoles.Admin))
            || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true
            || currentUser?.Id.Equals(Model.DeveloperUserId) == true
            || currentUser?.Id.Equals(Model.SubmitterUserId) == true)
            {
                <a asp-action="Edit" asp-controller="Tickets"
                   asp-route-ticketId="@Model.Id">
                    <i class="bi bi-pencil-fill text-danger"></i>
                </a>
            }
        </div>
        <partial name="_TicketDescriptionPartial" model="@Model" />
    </div>
    @* End Description Card*@
    @* Start Submitter Card*@
    <div class="col-12 col-md-4">
        <h3>Submitted By:</h3>
        <partial name="_UserPartial" model="@(await _CompanyService.GetCompanyUserByIdAsync(Model.SubmitterUserId, Model.Project?.CompanyId))" />
    </div>
    @* End Submitter Card*@
    @* Start History Card*@
    <div class="col-12 col-lg-6">
        <h3>Ticket History</h3>
        <partial name="_TicketHistoryPartial" model="@Model.History.OrderByDescending(h => h.Created)" />
    </div>
    @* End History Card*@
    @* Start Comments Card*@
    <div class="col-12 col-lg-6">
        <h3>Ticket Comments:</h3>
        <div class="card custom-card">
            <div class="main-content-app">
                <div class="main-content-body main-content-body-chat">
                    <div class="main-chat-header pt-0">
                        <div class="main-img-user online">
                            <img alt="avatar"
                                 src="@_FileService.ConvertByteArrayToFile(currentUser?.ImageData,currentUser?.ImageType,DefaultImage.BTUserImage)">
                        </div>
                        <div class="main-chat-msg-name">
                            <h6>@currentUser?.FullName</h6>
                            <small class="me-3">@((await _RoleService.GetUserRolesAsync(currentUser)).First())</small>
                        </div>
                        <nav class="nav">
                            <a class="nav-link" href="" data-bs-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">
                                <i class="fe fe-more-horizontal"></i>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end shadow">
                                <a class="dropdown-item" href="javascript:void(0)">Total Comments: @Model.Comments.Count()</a>
                            </div>
                            <a class="nav-link" data-bs-toggle="tooltip" href="javascript:void(0)" title="Total Comments: @Model.Comments.Count()"><i class="bi bi-layers"></i></a>
                        </nav>
                    </div>
                    <div class="main-chat-body">
                        <div class="content-inner">
                            @{
                                List<TicketComment> comments = Model.Comments.ToList();
                                for (int i = 0; i < comments.Count(); i++)
                                {
                                    if (comments[i].UserId == currentUser?.Id)
                                    {
                                        <div class="media flex-row-reverse">
                                            <div class="main-img-user">
                                                <img alt="avatar"
                                                     src="@_FileService.ConvertByteArrayToFile(currentUser?.ImageData,currentUser?.ImageType,DefaultImage.BTUserImage)">
                                            </div>
                                            <div class="media-body">
                                                <div class="main-msg-wrapper">
                                                    <strong>@currentUser?.FullName</strong><br />
                                                    @comments[i].Comment
                                                </div>
                                                @while (i < comments.Count() - 1 && comments[i + 1].UserId == currentUser?.Id)
                                                {
                                                    <div class="main-msg-wrapper2">
                                                        @comments[i + 1].Comment
                                                    </div>
                                                    i++;
                                                }
                                                <div>
                                                    <span>@comments[i].Created.ToString("MMM dd, hh:mm tt")</span><i class="icon ion-android-more-horizontal"></i>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        BTUser user = await _CompanyService.GetCompanyUserByIdAsync(comments[i].UserId, Model.Project?.CompanyId);
                                        <div class="media">
                                            <div class="main-img-user">
                                                <img alt="avatar"
                                                     src="@_FileService.ConvertByteArrayToFile(user.ImageData,user.ImageType,DefaultImage.BTUserImage)">
                                            </div>
                                            <div class="media-body">
                                                <div class="main-msg-wrapper">
                                                    <strong>@user.FullName</strong><br />
                                                    @comments[i].Comment
                                                </div>
                                                @while (i < comments.Count() - 1 && comments[i + 1].UserId == user.Id)
                                                {
                                                    <div class="main-msg-wrapper2">
                                                        @comments[i + 1].Comment
                                                    </div>
                                                    i++;
                                                }
                                                <div>
                                                    <span>@comments[i].Created.ToString("MMM dd, hh:mm tt")</span><i class="icon ion-android-more-horizontal"></i>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <form asp-controller="Tickets" asp-action="AddComment">
                        <div class="main-chat-footer">
                            <input type="hidden" name="ticketId" value="@Model.Id" />
                            <input class="form-control" name="comment" autocomplete="off"
                                   placeholder="Leave your comment here..." type="text">
                            @* <a class="main-msg-send" href=""><i class="far fa-paper-plane"></i></a> *@
                            <button class="btn btn-primary ripple" type="submit"><i class="bi bi-send"></i></button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    @* End Comments Card*@
    @* Start Attachments Card*@
    <div class="col-12">
        <div class="d-flex justify-content-between fs-5">
            <h3>Ticket Attachments</h3>
            @if (User.IsInRole(nameof(BTRoles.Admin))
            || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true
            || currentUser?.Id.Equals(Model.DeveloperUserId) == true
            || currentUser?.Id.Equals(Model.SubmitterUserId) == true)
            {
                <a data-bs-target="#addAttachModal"
                   data-bs-toggle="modal">
                    <i class="bi bi-file-earmark-plus text-primary"></i>
                </a>
            }
        </div>
        <div class="row">
            @if (Model.Attachments.Count() == 0)
            {
                <div class="col-12">
                    <div class="card custom-card">
                        <div class="card-body text-center">
                            <h5 class="fw-bold">There are presently no attachments</h5>
                        </div>
                    </div>
                </div>
            }
            else
            {
                @foreach (TicketAttachment attachment in Model.Attachments)
                {
                    <div class="col-12 col-lg-6">
                        <div class="card custom-card">
                            <div class="card-body">
                                <div class="d-flex">
                                    <div class="media align-items-center pos-relative">
                                        <span class="tx-16 lh--7 my-auto"><i class="bg-primary-light p-2 rounded-50 fe fe-image tx-18 me-2"></i></span>
                                        <div class="media-body ms-3">
                                            @attachment.FileName
                                            <p class="tx-11 mg-b-0 tx-gray-500">@attachment.Description</p>
                                        </div>
                                    </div>
                                    <div class="float-end ms-auto pos-absolute r-5 t-15 ">
                                        <a href="javascript:void(0)" class="option-dots" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fe fe-more-vertical"></i></a>
                                        <div class="dropdown-menu dropdown-menu-start">
                                            @if (User.IsInRole(nameof(BTRoles.ProjectManager))
                                           || currentUser?.Id.Equals((await _ProjectService.GetProjectManagerAsync(Model.ProjectId))?.Id) == true
                                           || currentUser?.Id.Equals(attachment.UserId) == true
                                           || currentUser?.Id.Equals(attachment.UserId) == true)

                                            {
                                                <a class="dropdown-item" asp-action="EditTicketAttachment" asp-controller="Tickets"
                                                   asp-route-attachmentId="@attachment.Id" asp-route-ticketId="@Model.Id">
                                                    <i class="fe fe-edit me-2"></i>Edit
                                                </a>
                                            }
                                            <a class="dropdown-item" asp-action="ShowFile" asp-controller="Tickets"
                                               asp-route-attachmentId="@attachment.Id">
                                                <i class="fe fe-download me-2"></i>Download
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
    @* End Attachments Card*@
</div>
@* Start @*Ticket Priority modal *@
<div class="modal" id="priorityModal">
    <form asp-controller="Tickets" asp-action="UpdatePriority" method="post">
        <input type="hidden" name="ticketId" value="@Model.Id" />
        <div class="modal-dialog" role="document">
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h6 class="modal-title">Ticket Priority</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button"></button>
                </div>
                <div class="modal-body">
                    <!-- Select2 -->
                    <select name="selected" class="form-control"
                            asp-items="ViewBag.TicketPriorities">
                    </select>
                    <!-- Select2 -->
                </div>
                <div class="modal-footer">
                    <button class="btn ripple btn-primary" type="submit">Save</button>
                    <button class="btn ripple btn-secondary" data-bs-dismiss="modal" type="button">Cancel</button>
                </div>
            </div>
        </div>
    </form>
</div>
@* End Ticket Priority modal *@
@* Start @*Ticket Status modal *@
<div class="modal" id="statusModal">
    <form asp-controller="Tickets" asp-action="UpdateStatus" method="post">
        <input type="hidden" name="ticketId" value="@Model.Id" />
        <div class="modal-dialog" role="document">
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h6 class="modal-title">Ticket Status</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button"></button>
                </div>
                <div class="modal-body">
                    <!-- Select2 -->
                    <select name="selected" class="form-control"
                            asp-items="ViewBag.TicketStatuses">
                    </select>
                    <!-- Select2 -->
                </div>
                <div class="modal-footer">
                    <button class="btn ripple btn-primary" type="submit">Save</button>
                    <button class="btn ripple btn-secondary" data-bs-dismiss="modal" type="button">Cancel</button>
                </div>
            </div>
        </div>
    </form>
</div>
@* End Ticket Status modal *@
@* Start @*Ticket Type modal *@
<div class="modal" id="typeModal">
    <form asp-controller="Tickets" asp-action="UpdateType" method="post">
        <input type="hidden" name="ticketId" value="@Model.Id" />
        <div class="modal-dialog" role="document">
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h6 class="modal-title">Ticket Type</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button"></button>
                </div>
                <div class="modal-body">
                    <!-- Select2 -->
                    <select name="selected" class="form-control"
                            asp-items="ViewBag.TicketTypes">
                    </select>
                    <!-- Select2 -->
                </div>
                <div class="modal-footer">
                    <button class="btn ripple btn-primary" type="submit">Save</button>
                    <button class="btn ripple btn-secondary" data-bs-dismiss="modal" type="button">Cancel</button>
                </div>
            </div>
        </div>
    </form>
</div>
@* End Ticket Type modal *@
@* Start @*Assign Developer modal *@
<div class="modal" id="devModal">
    <form asp-controller="Tickets" asp-action="AssignDeveloper" method="post">
        <input type="hidden" name="ticketId" value="@Model.Id" />
        <div class="modal-dialog" role="document">
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h6 class="modal-title">Assign Developer</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button"></button>
                </div>
                <div class="modal-body">
                    <!-- Select2 -->
                    <select name="selectedDevId" class="form-control"
                            asp-items="ViewBag.Developers">
                    </select>
                    <!-- Select2 -->
                </div>
                <div class="modal-footer">
                    <button class="btn ripple btn-primary" type="submit">Save</button>
                    <button class="btn ripple btn-secondary" data-bs-dismiss="modal" type="button">Cancel</button>
                </div>
            </div>
        </div>
    </form>
</div>
@* End Assign Developer modal *@
@* Start @*Add Attachment modal *@
<div class="modal" id="addAttachModal">
    <form asp-controller="Tickets" asp-action="AddTicketAttachment" enctype="multipart/form-data" method="post">
        <input type="hidden" name="TicketId" value="@Model.Id" />
        <div class="modal-dialog" role="document">
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h6 class="modal-title">Add a File</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="modal" type="button"></button>
                </div>
                <div class="modal-body">
                    <label>
                        Description
                        <input type="text" name="Description" class="form-control" />
                    </label>
                    <label class="btn btn-outline-primary btn-sm">
                        <input name="FormFile" type="file" class="form-control-file" />
                    </label>
                    <div class="form-group">
                        <button type="button" class="btn btn-danger ripple">Cancel</button>
                        <button type="submit" class="btn btn-primary ripple">Save</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
@* End Add Attachment modal *@
@section scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <!--CK Editor-->
    <script src="https://cdn.ckeditor.com/ckeditor5/35.0.1/super-build/ckeditor.js"></script>
    <script>
        CKEDITOR.ClassicEditor.create(document.querySelector('.editor'), {
            toolbar: {
                items: [
                    'findAndReplace', 'selectAll', '|',
                    'heading', '|',
                    'bold', 'italic', 'strikethrough', 'underline', 'code', 'subscript', 'superscript', 'removeFormat', '|',
                    'bulletedList', 'numberedList', 'todoList', '|',
                    'outdent', 'indent', '|',
                    'undo', 'redo',
                    '-',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'highlight', '|',
                    'alignment', '|',
                    'link', 'insertImage', 'blockQuote', 'insertTable', 'mediaEmbed', 'codeBlock', 'htmlEmbed', '|',
                    'specialCharacters', 'horizontalLine', 'pageBreak', '|',
                ],
                shouldNotGroupWhenFull: true
            },
            list: {
                properties: {
                    styles: true,
                    startIndex: true,
                    reversed: true
                }
            },
            heading: {
                options: [
                    { model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },
                    { model: 'heading1', view: 'h1', title: 'Heading 1', class: 'ck-heading_heading1' },
                    { model: 'heading2', view: 'h2', title: 'Heading 2', class: 'ck-heading_heading2' },
                    { model: 'heading3', view: 'h3', title: 'Heading 3', class: 'ck-heading_heading3' },
                    { model: 'heading4', view: 'h4', title: 'Heading 4', class: 'ck-heading_heading4' },
                    { model: 'heading5', view: 'h5', title: 'Heading 5', class: 'ck-heading_heading5' },
                    { model: 'heading6', view: 'h6', title: 'Heading 6', class: 'ck-heading_heading6' }
                ]
            },
            fontFamily: {
                options: [
                    'default',
                    'Arial, Helvetica, sans-serif',
                    'Courier New, Courier, monospace',
                    'Georgia, serif',
                    'Lucida Sans Unicode, Lucida Grande, sans-serif',
                    'Tahoma, Geneva, sans-serif',
                    'Times New Roman, Times, serif',
                    'Trebuchet MS, Helvetica, sans-serif',
                    'Verdana, Geneva, sans-serif'
                ],
                supportAllValues: true
            },
            fontSize: {
                options: [10, 12, 14, 'default', 18, 20, 22],
                supportAllValues: true
            },
            htmlSupport: {
                allow: [
                    {
                        name: /.*/,
                        attributes: true,
                        classes: true,
                        styles: true
                    }
                ]
            },
            htmlEmbed: {
                showPreviews: true
            },
            link: {
                decorators: {
                    addTargetToExternalLinks: true,
                    defaultProtocol: 'https://',

                }
            },
            removePlugins: [
                'CKBox',
                'CKFinder',
                'RealTimeCollaborativeComments',
                'RealTimeCollaborativeTrackChanges',
                'RealTimeCollaborativeRevisionHistory',
                'PresenceList',
                'Comments',
                'TrackChanges',
                'TrackChangesData',
                'RevisionHistory',
                'Pagination',
                'WProofreader',
            ]
        });
    </script>
    <!--End CK Editor-->
    <!--Sweet Alerts-->
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let message = '@(ViewBag.StatusMessage)';
        if (!message.includes("Error") && message != '') {
            Swal.fire({
                backdrop: false,
                icon: 'success',
                title: message,
                showConfirmButton: true
            });
        } else if (message.includes("Error")) {
            Swal.fire({
                backdrop: false,
                icon: 'error',
                title: 'Oops...',
                text: message
            });
        }
    </script>
    <!--End Sweet Alerts-->
    }